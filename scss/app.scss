// FEATURES DI SASS
// 1) Possiamo scrivere del normalissimo CSS
html {
  height: 100%;
}

body {
  margin: 0;
}

h1 {
  color: red;
}

// nav {
//   text-align: center;
//   margin-top: 2em;
// }

// ul.navbar {
//   margin: 0;
//   padding: 0;
//   list-style-type: none;
//   display: flex;
//   flex-direction: column;
//   gap: 5px;
// }

// 2) SELETTORI NIDIFICATI / ANNIDATI

nav {
  text-align: center;
  margin-top: 2em;
  .navbar {
    // come un selettore "nav .navbar"
    margin: 0;
    padding: 0;
    list-style-type: none;
    display: flex;
    flex-direction: column;
    gap: 5px;
    @media screen and (min-width: 600px) {
      // il selettore implicito è "nav .navbar"
      flex-direction: row;
      justify-content: center;
      align-items: center;
    }
    a {
      // come un selettore "nav .navbar a"
      text-decoration: none;
      // font-size: 0.9em;
      @media screen and (min-width: 600px) {
        // il selettore implicito è "nav .navbar a"
        color: red;
      }
    }
  }
}

.button-container {
  text-align: center;
}

// 3) LAVORARE CON LE PSEUDOCLASSI (:hover, :active, :nth-of-type, etc.)
button.primary-button {
  background-color: lightblue;
  color: black;
  border-radius: 20px;
  padding: 10px 20px;
  border-color: rgb(135, 166, 176);
  cursor: pointer;
  &:hover {
    // & è come se fosse una specie di "this"
    // "button.primary-button:hover"
    color: white;
    background-color: rgb(58, 58, 233);
    border-color: rgb(45, 45, 166);
  }
}

nav {
  ul {
    li {
      font-size: 0.9em;
      &:nth-of-type(3) {
        // la & è come "nav ul li:nth-of-type(3)"
        font-size: 1.2em;
      }
    }
  }
}

// 4) UTILIZZARE UN PREFISSO COMUNE PER PROPRIETÀ SIMILI

// p.main-paragraph {
//   font-size: 1.15em;
//   font-weight: 700; // come se fosse bold
//   font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
//     'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
// }

p.main-paragraph {
  font: {
    size: 1.15em;
    weight: 700;
    family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',
      'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
  }
}

// 5) VARIABILI
// le variabili in SASS servono per MEMORIZZARE dei valori (al fine di riutilizzarli)
// i valori che salviamo nelle variabili potranno venire riutilizzati nelle regole di stile
// concettualmente queste "variabili" sono più simili alle "costanti"

// quali tipi di dato si possono salvare in SASS?
// - valori numerici (1, 100, 10px, 2.5em, 23% etc.)
// - stringhe ('hello', 'ciao')
// - colori (red, lightblue, cyan, rgb(0,0,0), #ab3452 etc.)
// - booleani (true, false)
// - null
// - valori "combinati" (1px solid black, 0 auto, etc.)
// - liste di valori (10px, 12px, 14px) -> un po' come un array in JS
// - mappe di coppie chiave/valore (in inglese "map") -> un po' come gli oggetti in JS

// es.
$main-margin: 35px; // d'ora in poi potrò riutilizzare questa quantità semplicemente utilizzando il suo nome, $main-margin
$main-color: rgb(
  20,
  200,
  120
); // d'ora in poi potrò riutilizzare questo colore semplicemente utilizzando il suo nome, $main-color

body {
  margin: $main-margin; // la sintassi di utilizzo di una variabile è uguale alla sintassi della sua dichiarazione
}

header .header p {
  color: $main-color;
}
